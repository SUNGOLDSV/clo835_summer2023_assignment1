name: Build and Push Docker Images to ECR

on:
  # Trigger on push to the main branch
  push:
    branches:
      - main
  
  # Allow manual runs from the Actions tab
  workflow_dispatch:

env:
  AWS_REGION: us-east-1
  APP_ECR_REPOSITORY_URL: ${{ secrets.APP_ECR_REPOSITORY_URL }}
  DB_ECR_REPOSITORY_URL: ${{ secrets.DB_ECR_REPOSITORY_URL }}

jobs:
  build-and-push-images:
    name: Build and Push to ECR
    runs-on: ubuntu-latest
    permissions:
      contents: read
      # id-token: write is only needed for OIDC, not access keys.

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Set Image Tags
        id: image_tags
        run: |
          echo "TAG_VERSION=v${{ github.run_number }}" >> $GITHUB_ENV
          echo "TAG_LATEST=latest" >> $GITHUB_ENV
          echo "Using tags: v${{ github.run_number }} and latest"

      # --- Build and Push MySQL Database Image ---
      - name: Build, Tag, and Push MySQL DB Image to ECR
        run: |
          echo "Building MySQL image from Dockerfile_mysql"
          
          # Build and tag with both the version (e.g., v1) and 'latest'
          docker build -t ${{ env.DB_ECR_REPOSITORY_URL }}:${{ env.TAG_VERSION }} -t ${{ env.DB_ECR_REPOSITORY_URL }}:${{ env.TAG_LATEST }} -f Dockerfile_mysql .
          
          # Push both tags to the repository at once
          echo "Pushing MySQL tags: ${{ env.TAG_VERSION }} and ${{ env.TAG_LATEST }}"
          docker push --all-tags ${{ env.DB_ECR_REPOSITORY_URL }}

      # --- Build and Push Application Image ---
      - name: Build, Tag, and Push Application Image to ECR
        run: |
          echo "Building Application image from Dockerfile"

          # Build and tag with both the version (e.g., v1) and 'latest'
          docker build -t ${{ env.APP_ECR_REPOSITORY_URL }}:${{ env.TAG_VERSION }} -t ${{ env.APP_ECR_REPOSITORY_URL }}:${{ env.TAG_LATEST }} -f Dockerfile .
          
          # Push both tags to the repository at once
          echo "Pushing Application tags: ${{ env.TAG_VERSION }} and ${{ env.TAG_LATEST }}"
          docker push --all-tags ${{ env.APP_ECR_REPOSITORY_URL }}

      - name: Logout of Amazon ECR
        if: always()
        run: docker logout ${{ steps.login-ecr.outputs.registry }}
